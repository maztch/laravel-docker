#!/bin/bash
# scripts/psql
# Execute PostgreSQL commands or connect to PostgreSQL shell

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Load environment variables
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

CONTAINER_NAME="${COMPOSE_PROJECT_NAME:-laravel-app}_postgresql"
DB_NAME="${POSTGRESQL_DATABASE:-laravel}"
DB_USER="${POSTGRESQL_USER:-laravel_user}"
DB_PASS="${POSTGRESQL_PASSWORD:-laravel_password}"

# Check if container is running
if ! docker ps --format "table {{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
    echo -e "${YELLOW}Warning: PostgreSQL container '${CONTAINER_NAME}' is not running${NC}"
    echo "Starting containers..."
    docker compose up -d postgresql
    sleep 5
fi

# If no arguments provided, connect to PostgreSQL shell
if [ $# -eq 0 ]; then
    echo -e "${GREEN}Connecting to PostgreSQL shell...${NC}"
    docker compose exec postgresql psql -U "${DB_USER}" -d "${DB_NAME}"
else
    case "$1" in
        "root")
            echo -e "${GREEN}Connecting as postgres superuser...${NC}"
            docker compose exec postgresql psql -U postgres
            ;;
        "dump")
            echo -e "${GREEN}Creating database dump...${NC}"
            DUMP_FILE="dump_$(date +%Y%m%d_%H%M%S).sql"
            docker compose exec postgresql pg_dump -U "${DB_USER}" "${DB_NAME}" > "${DUMP_FILE}"
            echo "Database dumped to: ${DUMP_FILE}"
            ;;
        "import")
            if [ -z "$2" ]; then
                echo -e "${YELLOW}Usage: ./scripts/psql import <file.sql>${NC}"
                exit 1
            fi
            echo -e "${GREEN}Importing database from $2...${NC}"
            docker compose exec -T postgresql psql -U "${DB_USER}" -d "${DB_NAME}" < "$2"
            ;;
        "logs")
            echo -e "${GREEN}Showing PostgreSQL logs...${NC}"
            docker compose logs -f postgresql
            ;;
        "vacuum")
            echo -e "${GREEN}Running VACUUM ANALYZE...${NC}"
            docker compose exec postgresql psql -U "${DB_USER}" -d "${DB_NAME}" -c "VACUUM ANALYZE;"
            ;;
        "size")
            echo -e "${GREEN}Database size information:${NC}"
            docker compose exec postgresql psql -U "${DB_USER}" -d "${DB_NAME}" -c "
                SELECT 
                    schemaname,
                    tablename,
                    attname,
                    n_distinct,
                    correlation
                FROM pg_stats
                WHERE schemaname = 'public'
                ORDER BY schemaname, tablename;
                
                SELECT 
                    pg_size_pretty(pg_database_size('${DB_NAME}')) as database_size;
            "
            ;;
        *)
            echo -e "${GREEN}Executing: psql $@${NC}"
            docker compose exec postgresql psql -U "${DB_USER}" -d "${DB_NAME}" -c "$*"
            ;;
    esac
fi